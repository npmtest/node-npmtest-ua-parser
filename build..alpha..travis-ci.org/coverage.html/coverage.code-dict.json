{"/home/travis/build/npmtest/node-npmtest-ua-parser/test.js":"/* istanbul instrument in package npmtest_ua_parser */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-ua-parser/lib.npmtest_ua_parser.js":"/* istanbul instrument in package npmtest_ua_parser */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_ua_parser = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_ua_parser = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-ua-parser/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-ua-parser && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_ua_parser */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_ua_parser\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_ua_parser.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_ua_parser.rollup.js'] =\n            local.assetsDict['/assets.npmtest_ua_parser.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_ua_parser.__dirname + '/lib.npmtest_ua_parser.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-ua-parser/node_modules/ua-parser/js/index.js":"var path = require('path'), \n    fs = require('fs'),\n    yaml = require('yamlparser'),\n    Results = require('./lib/results').BackwardsCompatResults;\n\nvar file = path.join(__dirname, '..', 'regexes.yaml'),\n    regexes = fs.readFileSync(file, 'utf8');\n\nregexes = yaml.eval(regexes);\n\nvar parseUA = require('./lib/ua').makeParser(regexes.user_agent_parsers);\nexports.parseUA = parseUA;\n\nvar parseOS = require('./lib/os').makeParser(regexes.os_parsers);\nexports.parseOS = parseOS;\n\nvar parseDevice = require('./lib/device').makeParser(regexes.device_parsers);\nexports.parseDevice = parseDevice;\n\nexports.parse = parse;\nfunction parse(str) {\n  var ua = parseUA(str),\n      os = parseOS(str),\n      device = parseDevice(str);\n  return new Results(str, ua, os, device);\n}\n\nif (require.main === module) {\n  var output, input = process.argv[2];\n  if (!input) { process.exit(1); }\n  process.stdout.write(parseUA(input).toString());\n}\n","/home/travis/build/npmtest/node-npmtest-ua-parser/node_modules/ua-parser/js/lib/results.js":"var UNDEF = void 0;\n\nexports.BackwardsCompatResults = BackwardsCompatResults;\nfunction BackwardsCompatResults(ua_str, ua, os, device) {\n  this.string = ua_str;\n  this.userAgent = this.ua = ua;\n  this.os = os;\n  this.device = device\n\n  // Backwards compat\n  var major = ua.major,\n      minor = ua.minor,\n      patch = ua.patch;\n\n  this.family = ua.family;\n  this.major = major === null ? UNDEF : parseInt(major);\n  this.minor = minor === null ? UNDEF : parseInt(minor);\n  this.patch = patch === null ? UNDEF : parseInt(patch);\n}\n\n// Backwards compat\nBackwardsCompatResults.prototype.toVersionString = function() {\n  var output = '',\n      ua = this.ua;\n  if (ua.major != null) {\n    output += ua.major;\n    if (ua.minor != null) {\n      output += '.' + ua.minor;\n      if (ua.patch != null) {\n        output += '.' + ua.patch;\n      }\n    }\n  }\n  return output;\n};\n\n// Backwards compat\nBackwardsCompatResults.prototype.toString = function() {\n  var suffix = this.toVersionString();\n  if (suffix) { suffix = ' ' + suffix; }\n  return this.ua.family + suffix;\n};\n\n// Backwards compat\nBackwardsCompatResults.prototype.toFullString = function() {\n  return this.toString() + (this.os ? '/' + this.os : '');\n};\n","/home/travis/build/npmtest/node-npmtest-ua-parser/node_modules/ua-parser/js/lib/ua.js":"var startsWithDigit = require('./helpers').startsWithDigit,\n    OS = require('./os').OS;\n\nexports.UA = UA\nfunction UA(family, major, minor, patch) {\n  this.family = family || 'Other';\n  this.major = major || null;\n  this.minor = minor || null;\n  this.patch = patch || null;\n}\n\nrequire('util').inherits(UA, OS)\n\nfunction _makeParsers(obj) {\n  var regexp = new RegExp(obj.regex),\n      famRep = obj.family_replacement,\n      majorRep = obj.v1_replacement,\n      minorRep = obj.v2_replacement,\n      patchRep = obj.v3_replacement;\n\n  function parser(str) {\n    var m = str.match(regexp);\n    if (!m) { return null; }\n    \n    var family = famRep ? famRep.replace('$1', m[1]) : m[1],\n        major = majorRep || m[2],\n        minor = minorRep || m[3],\n        patch = patchRep || m[4];\n    \n    return new UA(family, major, minor, patch);\n  }\n\n  return parser;\n}\n\nexports.makeParser = function(regexes) {\n  var parsers = regexes.map(_makeParsers)\n\n  function parser(str) {\n    var obj;\n\n    if (typeof str === 'string') {\n      for (var i = 0, length = parsers.length; i < length; i++) {\n        obj = parsers[i](str);\n        if (obj) { return obj; }\n      }\n    }\n    \n    return obj || new UA();\n  }\n\n  return parser;\n}","/home/travis/build/npmtest/node-npmtest-ua-parser/node_modules/ua-parser/js/lib/helpers.js":"var DIGITS = /^\\d/;\n\nexports.startsWithDigit = startsWithDigit;\nfunction startsWithDigit(str) {\n  return DIGITS.test(str);\n}","/home/travis/build/npmtest/node-npmtest-ua-parser/node_modules/ua-parser/js/lib/os.js":"var startsWithDigit = require('./helpers').startsWithDigit;\n\nexports.OS = OS\nfunction OS(family, major, minor, patch, patchMinor) {\n  this.family = family || 'Other';\n  this.major = major || null;\n  this.minor = minor || null;\n  this.patch = patch || null;\n  this.patchMinor = patchMinor || null;\n}\n\nOS.prototype.toVersionString = function() {\n  var output = '';\n  if (this.major != null) {\n    output += this.major;\n    if (this.minor != null) {\n      output += '.' + this.minor;\n      if (this.patch != null) {\n        if (startsWithDigit(this.patch)) { output += '.'; }\n        output += this.patch;\n        if (this.patchMinor != null) {\n          if (startsWithDigit(this.patchMinor)) { output += '.'; }\n          output += this.patchMinor;\n        }\n      }\n    }\n  }\n  return output;\n};\n\nOS.prototype.toString = function() {\n  var suffix = this.toVersionString();\n  if (suffix) { suffix = ' ' + suffix; }\n  return this.family + suffix;\n};\n\nfunction _makeParsers(obj) {\n  var regexp = new RegExp(obj.regex),\n      famRep = obj.os_replacement,\n      majorRep = obj.os_v1_replacement,\n      minorRep = obj.os_v2_replacement,\n      patchRep = obj.os_v3_replacement,\n      patchMinorRep = obj.os_v4_replacement;\n\n  function parser(str) {\n    var m = str.match(regexp);\n    if (!m) { return null; }\n    \n    var family = famRep ? famRep.replace('$1', m[1]) : m[1],\n        major = majorRep || m[2],\n        minor = minorRep || m[3],\n        patch = patchRep || m[4],\n        patchMinor = patchMinorRep || m[5];\n\n    return new OS(family, major, minor, patch, patchMinor);\n  }\n\n  return parser;\n}\n\nexports.makeParser = function(regexes) {\n  var parsers = regexes.map(_makeParsers)\n\n  function parser(str) {\n    var obj;\n\n    if (typeof str === 'string') {\n      for (var i = 0, length = parsers.length; i < length; i++) {\n        obj = parsers[i](str);\n        if (obj) { return obj; }\n      }\n    }\n\n    return obj || new OS();\n  }\n\n  return parser;\n}","/home/travis/build/npmtest/node-npmtest-ua-parser/node_modules/ua-parser/js/lib/device.js":"exports.Device = Device\nfunction Device(family) {\n  this.family = family || 'Other';\n}\n\nDevice.prototype.toString = function() {\n  return this.family;\n};\n\n\nexports.makeParser = function(regexes) {\n  var parsers = regexes.map(function (obj) {\n    var regexp = new RegExp(obj.regex),\n        deviceRep = obj.device_replacement;\n\n    function parser(str) {\n      var m = str.match(regexp);\n      if (!m) { return null; }\n\n      var family = deviceRep ? deviceRep.replace('$1', m[1]) : m[1];\n      return new Device(family);\n    }\n\n    return parser;\n  });\n\n  function parser(str, ua_family, os_family) {\n    var obj;\n\n    if (typeof str === 'string') {\n      for (var i = 0, length = parsers.length; i < length; i++) {\n        obj = parsers[i](str, ua_family, os_family);\n        if (obj) { return obj; }\n      }\n    }\n\n    return obj || new Device();\n  }\n\n  return parser;\n};\n"}